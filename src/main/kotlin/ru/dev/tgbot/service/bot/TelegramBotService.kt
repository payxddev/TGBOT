package ru.dev.tgbot.service.bot


import org.springframework.beans.factory.annotation.Autowired
import org.springframework.stereotype.Service
import org.telegram.telegrambots.meta.api.methods.send.SendMessage
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText
import org.telegram.telegrambots.meta.api.objects.LinkPreviewOptions
import org.telegram.telegrambots.meta.api.objects.Update
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo
import ru.dev.tgbot.bot.TelegramBot

import ru.dev.tgbot.config.BotConfig
import ru.dev.tgbot.service.PaymentService
import ru.dev.tgbot.service.VpnService
import ru.dev.tgbot.service.web.TariffService
import java.math.BigInteger


@Service
class TelegramBotService(
    private val keyboardService: KeyboardService,
    private val tariffService: TariffService,
    private val paymentService: PaymentService,
    private val botConfig: BotConfig,
    private val vpnService: VpnService
) {
    @Autowired
    private lateinit var telegramBot: TelegramBot
    fun handleUpdate(update: Update): SendMessage {
        if (update.hasCallbackQuery()) {
            return handleCallback(update)
        }
        val chatId = update.message.chatId.toString()
        val sender = update.message.from?.firstName + " (" + update.message.from?.userName + ")"
        val messageText = update.message.text

        val responseMessage = SendMessage(chatId, "")


        when (messageText) {
            "–ü—Ä–∏—Å–æ–µ–¥–µ–Ω–∏—Ç—å—Å—è üöÄ".trimIndent() -> {
                val tariffs = tariffService.getAllTariffs()
                val inlineKeyboardMarkup = InlineKeyboardMarkup()
                val keyboardButtons = tariffs.map { tariff ->
                    val button = InlineKeyboardButton(tariff.title)
                    button.callbackData = tariff.callback
                    listOf(button)
                }
                inlineKeyboardMarkup.keyboard = keyboardButtons
                responseMessage.text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ:"
                responseMessage.replyMarkup = inlineKeyboardMarkup
            }
            "–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ üë§".trimIndent() -> {
                val username = update.message.from.userName  // –ò—Å–ø–æ–ª—å–∑—É–µ–º Telegram ID –∫–∞–∫ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                val userData = vpnService.getUserData(username)

                if (userData != null) {
                    val subscriptionUrl = userData["subscription_url"] as? String ?: "https://google.com"
                    responseMessage.text = "–í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚¨á\uFE0F"
                    responseMessage.replyMarkup = getSubscriptionKeyboard(subscriptionUrl)
                } else {
                    responseMessage.text = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                }
            }
            "–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å ? üÜò".trimIndent() -> {
                val channelLink = "https://t.me/nsk_vpn" // –≠—Ç–æ —Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∞—à –∫–∞–Ω–∞–ª –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏

                responseMessage.text = """
        –ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ <a href="$channelLink">—Å—Å—ã–ª–∫–µ</a> –∏ –∑–∞–¥–∞–π—Ç–µ –Ω–∞–º –≤–æ–ø—Ä–æ—Å. –ú—ã –≤—Å–µ–≥–¥–∞ —Ä–∞–¥—ã –ø–æ–º–æ—á—å ü§ó
    """.trimIndent()

                responseMessage.enableHtml(true)  // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É HTML –¥–ª—è —Å—Å—ã–ª–∫–∏

            }
            "/start" -> {
                responseMessage.text = "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, $sender \uD83D\uDC4B\uD83C\uDFFB\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ ‚¨áÔ∏è"
                responseMessage.replyMarkup = keyboardService.createMainMenuKeyboard()
            }
            else -> {
                responseMessage.text = "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é, –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã."
                responseMessage.replyMarkup = keyboardService.createMainMenuKeyboard()
            }
        }

        return responseMessage
    }

    fun handleCallback(update: Update): SendMessage {
            val callbackQuery = update.callbackQuery
            val chatId = callbackQuery.message.chatId.toString()
            val callbackData = callbackQuery.data
            val tgid = callbackQuery.from?.id?.toBigInteger()?: BigInteger.ZERO
            val tgUsername = callbackQuery.from?.userName ?: ""
            val responseMessage = SendMessage(chatId, "")

        val tariff = tariffService.findByCallback(callbackData)

        if (tariff != null) {
            val receipt = paymentService.createReceipt("f\"–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å: " + tariff.title, tariff.price.toDouble(), botConfig.customerEmail)
            val payment = paymentService.createPayment(
                description = "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN —Å–µ—Ä–≤–∏—Å: ${tariff.title}",
                price = tariff.price.toDouble(),
                receipt = receipt,
                tgId = tgid,
                tgUsername = tgUsername,// –≠—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
                chatId = chatId.toBigInteger(),
                callback = tariff.callback
            )
            responseMessage.text = """
                –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç–∞—Ä–∏—Ñ: ${tariff.title}.
                –¶–µ–Ω–∞: ${tariff.price} —Ä—É–±./ ${tariff.months} –º–µ—Å.
            """.trimIndent()

            val inlineKeyboardMarkup = InlineKeyboardMarkup()
            val button = InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å").apply {
                webApp = WebAppInfo(payment.confirmation.url)
            }
            inlineKeyboardMarkup.keyboard = listOf(listOf(button))

            responseMessage.replyMarkup = inlineKeyboardMarkup
        } else {
            responseMessage.text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ."
        }

        return responseMessage
    }
    fun getSubscriptionKeyboard(subscriptionUrl: String): InlineKeyboardMarkup {
        val inlineKeyboardMarkup = InlineKeyboardMarkup()
        val button = InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ üîó").apply {
            webApp = WebAppInfo(subscriptionUrl)
        }
        inlineKeyboardMarkup.keyboard = listOf(listOf(button))
        return inlineKeyboardMarkup
    }
    fun sendSuccessNotification(chatId: String, tgUsername: String) {
        val userData = vpnService.getUserData(tgUsername)
        val subscriptionUrl = userData?.get("subscription_url") as? String ?: "https://google.com" // URL –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

        val message = """
        ‚úÖ –í–∞—à –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω!
        –í–∞—à VPN –∞–∫–∫–∞—É–Ω—Ç —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é.
        –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π.
        –í–∞—à–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–¥–ø–∏—Å–∫–∏ ‚¨áÔ∏è
    """.trimIndent()

        val sendMessage = SendMessage(chatId, message)
        sendMessage.replyMarkup = getSubscriptionKeyboard(subscriptionUrl) // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

        try {
            telegramBot.execute(sendMessage) // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        } catch (e: Exception) {
            e.printStackTrace()
        }
    }
}